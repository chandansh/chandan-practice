/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.coleg.service.base;

import com.coleg.model.Emp;

import com.coleg.service.EmpLocalService;
import com.coleg.service.EmpService;
import com.coleg.service.persistence.EmpPersistence;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.annotation.BeanReference;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the emp local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.coleg.service.impl.EmpLocalServiceImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. Always use {@link com.coleg.service.EmpLocalServiceUtil} to access the emp local service.
 * </p>
 *
 * @author chandan
 * @see com.coleg.service.impl.EmpLocalServiceImpl
 * @see com.coleg.service.EmpLocalServiceUtil
 * @generated
 */
public abstract class EmpLocalServiceBaseImpl implements EmpLocalService {
	/**
	 * Adds the emp to the database. Also notifies the appropriate model listeners.
	 *
	 * @param emp the emp to add
	 * @return the emp that was added
	 * @throws SystemException if a system exception occurred
	 */
	public Emp addEmp(Emp emp) throws SystemException {
		emp.setNew(true);

		return empPersistence.update(emp, false);
	}

	/**
	 * Creates a new emp with the primary key. Does not add the emp to the database.
	 *
	 * @param fooId the primary key for the new emp
	 * @return the new emp
	 */
	public Emp createEmp(long fooId) {
		return empPersistence.create(fooId);
	}

	/**
	 * Deletes the emp with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param fooId the primary key of the emp to delete
	 * @throws PortalException if a emp with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteEmp(long fooId) throws PortalException, SystemException {
		empPersistence.remove(fooId);
	}

	/**
	 * Deletes the emp from the database. Also notifies the appropriate model listeners.
	 *
	 * @param emp the emp to delete
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteEmp(Emp emp) throws SystemException {
		empPersistence.remove(emp);
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return empPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @param start the lower bound of the range of model instances to return
	 * @param end the upper bound of the range of model instances to return (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return empPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @param start the lower bound of the range of model instances to return
	 * @param end the upper bound of the range of model instances to return (not inclusive)
	 * @param orderByComparator the comparator to order the results by
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return empPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Counts the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return empPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Gets the emp with the primary key.
	 *
	 * @param fooId the primary key of the emp to get
	 * @return the emp
	 * @throws PortalException if a emp with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public Emp getEmp(long fooId) throws PortalException, SystemException {
		return empPersistence.findByPrimaryKey(fooId);
	}

	/**
	 * Gets a range of all the emps.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of emps to return
	 * @param end the upper bound of the range of emps to return (not inclusive)
	 * @return the range of emps
	 * @throws SystemException if a system exception occurred
	 */
	public List<Emp> getEmps(int start, int end) throws SystemException {
		return empPersistence.findAll(start, end);
	}

	/**
	 * Gets the number of emps.
	 *
	 * @return the number of emps
	 * @throws SystemException if a system exception occurred
	 */
	public int getEmpsCount() throws SystemException {
		return empPersistence.countAll();
	}

	/**
	 * Updates the emp in the database. Also notifies the appropriate model listeners.
	 *
	 * @param emp the emp to update
	 * @return the emp that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public Emp updateEmp(Emp emp) throws SystemException {
		emp.setNew(false);

		return empPersistence.update(emp, true);
	}

	/**
	 * Updates the emp in the database. Also notifies the appropriate model listeners.
	 *
	 * @param emp the emp to update
	 * @param merge whether to merge the emp with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the emp that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public Emp updateEmp(Emp emp, boolean merge) throws SystemException {
		emp.setNew(false);

		return empPersistence.update(emp, merge);
	}

	/**
	 * Gets the emp local service.
	 *
	 * @return the emp local service
	 */
	public EmpLocalService getEmpLocalService() {
		return empLocalService;
	}

	/**
	 * Sets the emp local service.
	 *
	 * @param empLocalService the emp local service
	 */
	public void setEmpLocalService(EmpLocalService empLocalService) {
		this.empLocalService = empLocalService;
	}

	/**
	 * Gets the emp remote service.
	 *
	 * @return the emp remote service
	 */
	public EmpService getEmpService() {
		return empService;
	}

	/**
	 * Sets the emp remote service.
	 *
	 * @param empService the emp remote service
	 */
	public void setEmpService(EmpService empService) {
		this.empService = empService;
	}

	/**
	 * Gets the emp persistence.
	 *
	 * @return the emp persistence
	 */
	public EmpPersistence getEmpPersistence() {
		return empPersistence;
	}

	/**
	 * Sets the emp persistence.
	 *
	 * @param empPersistence the emp persistence
	 */
	public void setEmpPersistence(EmpPersistence empPersistence) {
		this.empPersistence = empPersistence;
	}

	/**
	 * Gets the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Gets the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Gets the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Gets the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Gets the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Gets the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Gets the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query to perform
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = empPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = EmpLocalService.class)
	protected EmpLocalService empLocalService;
	@BeanReference(type = EmpService.class)
	protected EmpService empService;
	@BeanReference(type = EmpPersistence.class)
	protected EmpPersistence empPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
}