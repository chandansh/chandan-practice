/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.mpoer.training.customer.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.mpoer.training.customer.model.Customer;
import com.mpoer.training.customer.model.CustomerModel;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the Customer service. Represents a row in the &quot;training_Customer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.mpoer.training.customer.model.CustomerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a customer model instance should use the {@link com.mpoer.training.customer.model.Customer} interface instead.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CustomerImpl
 * @see com.mpoer.training.customer.model.Customer
 * @see com.mpoer.training.customer.model.CustomerModel
 * @generated
 */
public class CustomerModelImpl extends BaseModelImpl<Customer>
	implements CustomerModel {
	public static final String TABLE_NAME = "training_Customer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", new Integer(Types.BIGINT) },
			{ "name", new Integer(Types.VARCHAR) },
			{ "address", new Integer(Types.VARCHAR) },
			{ "inductionDate", new Integer(Types.TIMESTAMP) }
		};
	public static final String TABLE_SQL_CREATE = "create table training_Customer (id_ LONG not null primary key IDENTITY,name VARCHAR(75) null,address VARCHAR(75) null,inductionDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table training_Customer";
	public static final String ORDER_BY_JPQL = " ORDER BY customer.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY training_Customer.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.mpoer.training.customer.model.Customer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.mpoer.training.customer.model.Customer"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.mpoer.training.customer.model.Customer"));

	public CustomerModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long pk) {
		setId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	public void setAddress(String address) {
		if (_originalAddress == null) {
			_originalAddress = _address;
		}

		_address = address;
	}

	public String getOriginalAddress() {
		return GetterUtil.getString(_originalAddress);
	}

	public Date getInductionDate() {
		return _inductionDate;
	}

	public void setInductionDate(Date inductionDate) {
		_inductionDate = inductionDate;
	}

	public Customer toEscapedModel() {
		if (isEscapedModel()) {
			return (Customer)this;
		}
		else {
			return (Customer)Proxy.newProxyInstance(Customer.class.getClassLoader(),
				new Class[] { Customer.class }, new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Customer.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		CustomerImpl customerImpl = new CustomerImpl();

		customerImpl.setId(getId());

		customerImpl.setName(getName());

		CustomerModelImpl customerModelImpl = customerImpl;

		customerModelImpl._originalName = customerModelImpl._name;

		customerImpl.setAddress(getAddress());

		customerModelImpl._originalAddress = customerModelImpl._address;

		customerImpl.setInductionDate(getInductionDate());

		return customerImpl;
	}

	public int compareTo(Customer customer) {
		int value = 0;

		value = getName().compareTo(customer.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Customer customer = null;

		try {
			customer = (Customer)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = customer.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", inductionDate=");
		sb.append(getInductionDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.mpoer.training.customer.model.Customer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inductionDate</column-name><column-value><![CDATA[");
		sb.append(getInductionDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _id;
	private String _name;
	private String _originalName;
	private String _address;
	private String _originalAddress;
	private Date _inductionDate;
	private transient ExpandoBridge _expandoBridge;
}