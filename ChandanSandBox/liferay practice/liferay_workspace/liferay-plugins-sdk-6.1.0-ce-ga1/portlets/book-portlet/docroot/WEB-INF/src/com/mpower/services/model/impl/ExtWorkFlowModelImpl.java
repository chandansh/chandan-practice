/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.mpower.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.mpower.services.model.ExtWorkFlow;
import com.mpower.services.model.ExtWorkFlowModel;
import com.mpower.services.model.ExtWorkFlowSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the ExtWorkFlow service. Represents a row in the &quot;ExtWorkFlow&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.mpower.services.model.ExtWorkFlowModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExtWorkFlowImpl}.
 * </p>
 *
 * @author Meenu
 * @see ExtWorkFlowImpl
 * @see com.mpower.services.model.ExtWorkFlow
 * @see com.mpower.services.model.ExtWorkFlowModel
 * @generated
 */
@JSON(strict = true)
public class ExtWorkFlowModelImpl extends BaseModelImpl<ExtWorkFlow>
	implements ExtWorkFlowModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ext work flow model instance should use the {@link com.mpower.services.model.ExtWorkFlow} interface instead.
	 */
	public static final String TABLE_NAME = "ExtWorkFlow";
	public static final Object[][] TABLE_COLUMNS = {
			{ "extWorkflowId", Types.BIGINT },
			{ "resourcePrimKey", Types.BIGINT },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "parentResourcePrimKey", Types.BIGINT },
			{ "version", Types.INTEGER },
			{ "title", Types.VARCHAR },
			{ "content", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "priority", Types.INTEGER },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table ExtWorkFlow (extWorkflowId LONG not null primary key,resourcePrimKey LONG,classNameId LONG,classPK LONG,parentResourcePrimKey LONG,version INTEGER,title VARCHAR(75) null,content VARCHAR(75) null,description VARCHAR(75) null,priority INTEGER,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table ExtWorkFlow";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.mpower.services.model.ExtWorkFlow"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.mpower.services.model.ExtWorkFlow"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.mpower.services.model.ExtWorkFlow"),
			true);
	public static long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static long CLASSPK_COLUMN_BITMASK = 2L;
	public static long RESOURCEPRIMKEY_COLUMN_BITMASK = 4L;
	public static long STATUS_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ExtWorkFlow toModel(ExtWorkFlowSoap soapModel) {
		ExtWorkFlow model = new ExtWorkFlowImpl();

		model.setExtWorkflowId(soapModel.getExtWorkflowId());
		model.setResourcePrimKey(soapModel.getResourcePrimKey());
		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());
		model.setParentResourcePrimKey(soapModel.getParentResourcePrimKey());
		model.setVersion(soapModel.getVersion());
		model.setTitle(soapModel.getTitle());
		model.setContent(soapModel.getContent());
		model.setDescription(soapModel.getDescription());
		model.setPriority(soapModel.getPriority());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ExtWorkFlow> toModels(ExtWorkFlowSoap[] soapModels) {
		List<ExtWorkFlow> models = new ArrayList<ExtWorkFlow>(soapModels.length);

		for (ExtWorkFlowSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.mpower.services.model.ExtWorkFlow"));

	public ExtWorkFlowModelImpl() {
	}

	public long getPrimaryKey() {
		return _extWorkflowId;
	}

	public void setPrimaryKey(long primaryKey) {
		setExtWorkflowId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_extWorkflowId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ExtWorkFlow.class;
	}

	public String getModelClassName() {
		return ExtWorkFlow.class.getName();
	}

	@JSON
	public long getExtWorkflowId() {
		return _extWorkflowId;
	}

	public void setExtWorkflowId(long extWorkflowId) {
		_extWorkflowId = extWorkflowId;
	}

	@JSON
	public long getResourcePrimKey() {
		return _resourcePrimKey;
	}

	public void setResourcePrimKey(long resourcePrimKey) {
		_columnBitmask |= RESOURCEPRIMKEY_COLUMN_BITMASK;

		if (!_setOriginalResourcePrimKey) {
			_setOriginalResourcePrimKey = true;

			_originalResourcePrimKey = _resourcePrimKey;
		}

		_resourcePrimKey = resourcePrimKey;
	}

	public boolean isResourceMain() {
		return true;
	}

	public long getOriginalResourcePrimKey() {
		return _originalResourcePrimKey;
	}

	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@JSON
	public long getClassNameId() {
		return _classNameId;
	}

	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@JSON
	public long getClassPK() {
		return _classPK;
	}

	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@JSON
	public long getParentResourcePrimKey() {
		return _parentResourcePrimKey;
	}

	public void setParentResourcePrimKey(long parentResourcePrimKey) {
		_parentResourcePrimKey = parentResourcePrimKey;
	}

	@JSON
	public int getVersion() {
		return _version;
	}

	public void setVersion(int version) {
		_version = version;
	}

	@JSON
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	public void setContent(String content) {
		_content = content;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	public int getPriority() {
		return _priority;
	}

	public void setPriority(int priority) {
		_priority = priority;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	public Date getStatusDate() {
		return _statusDate;
	}

	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	/**
	 * @deprecated {@link #isApproved}
	 */
	public boolean getApproved() {
		return isApproved();
	}

	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExtWorkFlow toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ExtWorkFlow)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					ExtWorkFlow.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		ExtWorkFlowImpl extWorkFlowImpl = new ExtWorkFlowImpl();

		extWorkFlowImpl.setExtWorkflowId(getExtWorkflowId());
		extWorkFlowImpl.setResourcePrimKey(getResourcePrimKey());
		extWorkFlowImpl.setClassNameId(getClassNameId());
		extWorkFlowImpl.setClassPK(getClassPK());
		extWorkFlowImpl.setParentResourcePrimKey(getParentResourcePrimKey());
		extWorkFlowImpl.setVersion(getVersion());
		extWorkFlowImpl.setTitle(getTitle());
		extWorkFlowImpl.setContent(getContent());
		extWorkFlowImpl.setDescription(getDescription());
		extWorkFlowImpl.setPriority(getPriority());
		extWorkFlowImpl.setStatus(getStatus());
		extWorkFlowImpl.setStatusByUserId(getStatusByUserId());
		extWorkFlowImpl.setStatusByUserName(getStatusByUserName());
		extWorkFlowImpl.setStatusDate(getStatusDate());

		extWorkFlowImpl.resetOriginalValues();

		return extWorkFlowImpl;
	}

	public int compareTo(ExtWorkFlow extWorkFlow) {
		long primaryKey = extWorkFlow.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ExtWorkFlow extWorkFlow = null;

		try {
			extWorkFlow = (ExtWorkFlow)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = extWorkFlow.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ExtWorkFlowModelImpl extWorkFlowModelImpl = this;

		extWorkFlowModelImpl._originalResourcePrimKey = extWorkFlowModelImpl._resourcePrimKey;

		extWorkFlowModelImpl._setOriginalResourcePrimKey = false;

		extWorkFlowModelImpl._originalClassNameId = extWorkFlowModelImpl._classNameId;

		extWorkFlowModelImpl._setOriginalClassNameId = false;

		extWorkFlowModelImpl._originalClassPK = extWorkFlowModelImpl._classPK;

		extWorkFlowModelImpl._setOriginalClassPK = false;

		extWorkFlowModelImpl._originalStatus = extWorkFlowModelImpl._status;

		extWorkFlowModelImpl._setOriginalStatus = false;

		extWorkFlowModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ExtWorkFlow> toCacheModel() {
		ExtWorkFlowCacheModel extWorkFlowCacheModel = new ExtWorkFlowCacheModel();

		extWorkFlowCacheModel.extWorkflowId = getExtWorkflowId();

		extWorkFlowCacheModel.resourcePrimKey = getResourcePrimKey();

		extWorkFlowCacheModel.classNameId = getClassNameId();

		extWorkFlowCacheModel.classPK = getClassPK();

		extWorkFlowCacheModel.parentResourcePrimKey = getParentResourcePrimKey();

		extWorkFlowCacheModel.version = getVersion();

		extWorkFlowCacheModel.title = getTitle();

		String title = extWorkFlowCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			extWorkFlowCacheModel.title = null;
		}

		extWorkFlowCacheModel.content = getContent();

		String content = extWorkFlowCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			extWorkFlowCacheModel.content = null;
		}

		extWorkFlowCacheModel.description = getDescription();

		String description = extWorkFlowCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			extWorkFlowCacheModel.description = null;
		}

		extWorkFlowCacheModel.priority = getPriority();

		extWorkFlowCacheModel.status = getStatus();

		extWorkFlowCacheModel.statusByUserId = getStatusByUserId();

		extWorkFlowCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = extWorkFlowCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			extWorkFlowCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			extWorkFlowCacheModel.statusDate = statusDate.getTime();
		}
		else {
			extWorkFlowCacheModel.statusDate = Long.MIN_VALUE;
		}

		return extWorkFlowCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{extWorkflowId=");
		sb.append(getExtWorkflowId());
		sb.append(", resourcePrimKey=");
		sb.append(getResourcePrimKey());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", parentResourcePrimKey=");
		sb.append(getParentResourcePrimKey());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.mpower.services.model.ExtWorkFlow");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>extWorkflowId</column-name><column-value><![CDATA[");
		sb.append(getExtWorkflowId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resourcePrimKey</column-name><column-value><![CDATA[");
		sb.append(getResourcePrimKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentResourcePrimKey</column-name><column-value><![CDATA[");
		sb.append(getParentResourcePrimKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ExtWorkFlow.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ExtWorkFlow.class
		};
	private long _extWorkflowId;
	private long _resourcePrimKey;
	private long _originalResourcePrimKey;
	private boolean _setOriginalResourcePrimKey;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private long _parentResourcePrimKey;
	private int _version;
	private String _title;
	private String _content;
	private String _description;
	private int _priority;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private ExtWorkFlow _escapedModelProxy;
}