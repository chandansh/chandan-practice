/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.mpower.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.mpower.services.model.Book;
import com.mpower.services.model.BookModel;
import com.mpower.services.model.BookSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the Book service. Represents a row in the &quot;Book&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.mpower.services.model.BookModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookImpl}.
 * </p>
 *
 * @author Meenu
 * @see BookImpl
 * @see com.mpower.services.model.Book
 * @see com.mpower.services.model.BookModel
 * @generated
 */
@JSON(strict = true)
public class BookModelImpl extends BaseModelImpl<Book> implements BookModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a book model instance should use the {@link com.mpower.services.model.Book} interface instead.
	 */
	public static final String TABLE_NAME = "Book";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bookId", Types.BIGINT },
			{ "bookNumber", Types.BIGINT },
			{ "writerName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "firstName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "quantity", Types.INTEGER },
			{ "totalCost", Types.DOUBLE },
			{ "status", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Book (bookId LONG not null primary key,bookNumber LONG,writerName VARCHAR(75) null,createDate DATE null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,quantity INTEGER,totalCost DOUBLE,status VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Book";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.mpower.services.model.Book"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.mpower.services.model.Book"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.mpower.services.model.Book"),
			true);
	public static long BOOKNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Book toModel(BookSoap soapModel) {
		Book model = new BookImpl();

		model.setBookId(soapModel.getBookId());
		model.setBookNumber(soapModel.getBookNumber());
		model.setWriterName(soapModel.getWriterName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());
		model.setQuantity(soapModel.getQuantity());
		model.setTotalCost(soapModel.getTotalCost());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Book> toModels(BookSoap[] soapModels) {
		List<Book> models = new ArrayList<Book>(soapModels.length);

		for (BookSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.mpower.services.model.Book"));

	public BookModelImpl() {
	}

	public long getPrimaryKey() {
		return _bookId;
	}

	public void setPrimaryKey(long primaryKey) {
		setBookId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_bookId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Book.class;
	}

	public String getModelClassName() {
		return Book.class.getName();
	}

	@JSON
	public long getBookId() {
		return _bookId;
	}

	public void setBookId(long bookId) {
		_bookId = bookId;
	}

	@JSON
	public long getBookNumber() {
		return _bookNumber;
	}

	public void setBookNumber(long bookNumber) {
		_columnBitmask |= BOOKNUMBER_COLUMN_BITMASK;

		if (!_setOriginalBookNumber) {
			_setOriginalBookNumber = true;

			_originalBookNumber = _bookNumber;
		}

		_bookNumber = bookNumber;
	}

	public long getOriginalBookNumber() {
		return _originalBookNumber;
	}

	@JSON
	public String getWriterName() {
		if (_writerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _writerName;
		}
	}

	public void setWriterName(String writerName) {
		_writerName = writerName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@JSON
	public int getQuantity() {
		return _quantity;
	}

	public void setQuantity(int quantity) {
		_quantity = quantity;
	}

	@JSON
	public double getTotalCost() {
		return _totalCost;
	}

	public void setTotalCost(double totalCost) {
		_totalCost = totalCost;
	}

	@JSON
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	public void setStatus(String status) {
		_status = status;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Book toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Book)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Book.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		BookImpl bookImpl = new BookImpl();

		bookImpl.setBookId(getBookId());
		bookImpl.setBookNumber(getBookNumber());
		bookImpl.setWriterName(getWriterName());
		bookImpl.setCreateDate(getCreateDate());
		bookImpl.setFirstName(getFirstName());
		bookImpl.setLastName(getLastName());
		bookImpl.setQuantity(getQuantity());
		bookImpl.setTotalCost(getTotalCost());
		bookImpl.setStatus(getStatus());

		bookImpl.resetOriginalValues();

		return bookImpl;
	}

	public int compareTo(Book book) {
		long primaryKey = book.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Book book = null;

		try {
			book = (Book)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = book.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BookModelImpl bookModelImpl = this;

		bookModelImpl._originalBookNumber = bookModelImpl._bookNumber;

		bookModelImpl._setOriginalBookNumber = false;

		bookModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Book> toCacheModel() {
		BookCacheModel bookCacheModel = new BookCacheModel();

		bookCacheModel.bookId = getBookId();

		bookCacheModel.bookNumber = getBookNumber();

		bookCacheModel.writerName = getWriterName();

		String writerName = bookCacheModel.writerName;

		if ((writerName != null) && (writerName.length() == 0)) {
			bookCacheModel.writerName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			bookCacheModel.createDate = createDate.getTime();
		}
		else {
			bookCacheModel.createDate = Long.MIN_VALUE;
		}

		bookCacheModel.firstName = getFirstName();

		String firstName = bookCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			bookCacheModel.firstName = null;
		}

		bookCacheModel.lastName = getLastName();

		String lastName = bookCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			bookCacheModel.lastName = null;
		}

		bookCacheModel.quantity = getQuantity();

		bookCacheModel.totalCost = getTotalCost();

		bookCacheModel.status = getStatus();

		String status = bookCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			bookCacheModel.status = null;
		}

		return bookCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{bookId=");
		sb.append(getBookId());
		sb.append(", bookNumber=");
		sb.append(getBookNumber());
		sb.append(", writerName=");
		sb.append(getWriterName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", totalCost=");
		sb.append(getTotalCost());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.mpower.services.model.Book");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bookId</column-name><column-value><![CDATA[");
		sb.append(getBookId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookNumber</column-name><column-value><![CDATA[");
		sb.append(getBookNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>writerName</column-name><column-value><![CDATA[");
		sb.append(getWriterName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalCost</column-name><column-value><![CDATA[");
		sb.append(getTotalCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Book.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Book.class
		};
	private long _bookId;
	private long _bookNumber;
	private long _originalBookNumber;
	private boolean _setOriginalBookNumber;
	private String _writerName;
	private Date _createDate;
	private String _firstName;
	private String _lastName;
	private int _quantity;
	private double _totalCost;
	private String _status;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private Book _escapedModelProxy;
}