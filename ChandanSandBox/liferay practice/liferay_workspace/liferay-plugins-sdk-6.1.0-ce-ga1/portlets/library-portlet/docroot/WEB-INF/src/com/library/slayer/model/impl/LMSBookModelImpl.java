/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.library.slayer.model.impl;

import com.library.slayer.model.LMSBook;
import com.library.slayer.model.LMSBookModel;
import com.library.slayer.model.LMSBookSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the LMSBook service. Represents a row in the &quot;LMS_LMSBook&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.library.slayer.model.LMSBookModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LMSBookImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see LMSBookImpl
 * @see com.library.slayer.model.LMSBook
 * @see com.library.slayer.model.LMSBookModel
 * @generated
 */
@JSON(strict = true)
public class LMSBookModelImpl extends BaseModelImpl<LMSBook>
	implements LMSBookModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l m s book model instance should use the {@link com.library.slayer.model.LMSBook} interface instead.
	 */
	public static final String TABLE_NAME = "LMS_LMSBook";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "bookId", Types.BIGINT },
			{ "bookTitle", Types.VARCHAR },
			{ "author", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "fileName", Types.VARCHAR },
			{ "downloaded", Types.INTEGER },
			{ "status", Types.INTEGER },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LMS_LMSBook (uuid_ VARCHAR(75) null,bookId LONG not null primary key,bookTitle VARCHAR(75) null,author VARCHAR(75) null,description VARCHAR(75) null,fileName VARCHAR(75) null,downloaded INTEGER,status INTEGER,companyId LONG,groupId LONG,createDate DATE null,modifiedDate DATE null,userId LONG,userName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LMS_LMSBook";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.library.slayer.model.LMSBook"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.library.slayer.model.LMSBook"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.library.slayer.model.LMSBook"),
			true);
	public static long BOOKTITLE_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LMSBook toModel(LMSBookSoap soapModel) {
		LMSBook model = new LMSBookImpl();

		model.setUuid(soapModel.getUuid());
		model.setBookId(soapModel.getBookId());
		model.setBookTitle(soapModel.getBookTitle());
		model.setAuthor(soapModel.getAuthor());
		model.setDescription(soapModel.getDescription());
		model.setFileName(soapModel.getFileName());
		model.setDownloaded(soapModel.getDownloaded());
		model.setStatus(soapModel.getStatus());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LMSBook> toModels(LMSBookSoap[] soapModels) {
		List<LMSBook> models = new ArrayList<LMSBook>(soapModels.length);

		for (LMSBookSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.library.slayer.model.LMSBook"));

	public LMSBookModelImpl() {
	}

	public long getPrimaryKey() {
		return _bookId;
	}

	public void setPrimaryKey(long primaryKey) {
		setBookId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_bookId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return LMSBook.class;
	}

	public String getModelClassName() {
		return LMSBook.class.getName();
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	public long getBookId() {
		return _bookId;
	}

	public void setBookId(long bookId) {
		_bookId = bookId;
	}

	@JSON
	public String getBookTitle() {
		if (_bookTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _bookTitle;
		}
	}

	public void setBookTitle(String bookTitle) {
		_columnBitmask |= BOOKTITLE_COLUMN_BITMASK;

		if (_originalBookTitle == null) {
			_originalBookTitle = _bookTitle;
		}

		_bookTitle = bookTitle;
	}

	public String getOriginalBookTitle() {
		return GetterUtil.getString(_originalBookTitle);
	}

	@JSON
	public String getAuthor() {
		if (_author == null) {
			return StringPool.BLANK;
		}
		else {
			return _author;
		}
	}

	public void setAuthor(String author) {
		_author = author;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	public String getFileName() {
		if (_fileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileName;
		}
	}

	public void setFileName(String fileName) {
		_fileName = fileName;
	}

	@JSON
	public int getDownloaded() {
		return _downloaded;
	}

	public void setDownloaded(int downloaded) {
		_downloaded = downloaded;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public LMSBook toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (LMSBook)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					LMSBook.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		LMSBookImpl lmsBookImpl = new LMSBookImpl();

		lmsBookImpl.setUuid(getUuid());
		lmsBookImpl.setBookId(getBookId());
		lmsBookImpl.setBookTitle(getBookTitle());
		lmsBookImpl.setAuthor(getAuthor());
		lmsBookImpl.setDescription(getDescription());
		lmsBookImpl.setFileName(getFileName());
		lmsBookImpl.setDownloaded(getDownloaded());
		lmsBookImpl.setStatus(getStatus());
		lmsBookImpl.setCompanyId(getCompanyId());
		lmsBookImpl.setGroupId(getGroupId());
		lmsBookImpl.setCreateDate(getCreateDate());
		lmsBookImpl.setModifiedDate(getModifiedDate());
		lmsBookImpl.setUserId(getUserId());
		lmsBookImpl.setUserName(getUserName());

		lmsBookImpl.resetOriginalValues();

		return lmsBookImpl;
	}

	public int compareTo(LMSBook lmsBook) {
		long primaryKey = lmsBook.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		LMSBook lmsBook = null;

		try {
			lmsBook = (LMSBook)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = lmsBook.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LMSBookModelImpl lmsBookModelImpl = this;

		lmsBookModelImpl._originalUuid = lmsBookModelImpl._uuid;

		lmsBookModelImpl._originalBookTitle = lmsBookModelImpl._bookTitle;

		lmsBookModelImpl._originalGroupId = lmsBookModelImpl._groupId;

		lmsBookModelImpl._setOriginalGroupId = false;

		lmsBookModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LMSBook> toCacheModel() {
		LMSBookCacheModel lmsBookCacheModel = new LMSBookCacheModel();

		lmsBookCacheModel.uuid = getUuid();

		String uuid = lmsBookCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			lmsBookCacheModel.uuid = null;
		}

		lmsBookCacheModel.bookId = getBookId();

		lmsBookCacheModel.bookTitle = getBookTitle();

		String bookTitle = lmsBookCacheModel.bookTitle;

		if ((bookTitle != null) && (bookTitle.length() == 0)) {
			lmsBookCacheModel.bookTitle = null;
		}

		lmsBookCacheModel.author = getAuthor();

		String author = lmsBookCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			lmsBookCacheModel.author = null;
		}

		lmsBookCacheModel.description = getDescription();

		String description = lmsBookCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			lmsBookCacheModel.description = null;
		}

		lmsBookCacheModel.fileName = getFileName();

		String fileName = lmsBookCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			lmsBookCacheModel.fileName = null;
		}

		lmsBookCacheModel.downloaded = getDownloaded();

		lmsBookCacheModel.status = getStatus();

		lmsBookCacheModel.companyId = getCompanyId();

		lmsBookCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			lmsBookCacheModel.createDate = createDate.getTime();
		}
		else {
			lmsBookCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			lmsBookCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			lmsBookCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		lmsBookCacheModel.userId = getUserId();

		lmsBookCacheModel.userName = getUserName();

		String userName = lmsBookCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			lmsBookCacheModel.userName = null;
		}

		return lmsBookCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", bookId=");
		sb.append(getBookId());
		sb.append(", bookTitle=");
		sb.append(getBookTitle());
		sb.append(", author=");
		sb.append(getAuthor());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", fileName=");
		sb.append(getFileName());
		sb.append(", downloaded=");
		sb.append(getDownloaded());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.library.slayer.model.LMSBook");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookId</column-name><column-value><![CDATA[");
		sb.append(getBookId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookTitle</column-name><column-value><![CDATA[");
		sb.append(getBookTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileName</column-name><column-value><![CDATA[");
		sb.append(getFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>downloaded</column-name><column-value><![CDATA[");
		sb.append(getDownloaded());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LMSBook.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			LMSBook.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _bookId;
	private String _bookTitle;
	private String _originalBookTitle;
	private String _author;
	private String _description;
	private String _fileName;
	private int _downloaded;
	private int _status;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private LMSBook _escapedModelProxy;
}