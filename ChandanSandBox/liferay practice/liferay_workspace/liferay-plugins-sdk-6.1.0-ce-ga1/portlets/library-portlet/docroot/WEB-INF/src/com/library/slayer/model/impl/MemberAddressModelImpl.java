/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.library.slayer.model.impl;

import com.library.slayer.model.MemberAddress;
import com.library.slayer.model.MemberAddressModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the MemberAddress service. Represents a row in the &quot;LMS_MemberAddress&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.library.slayer.model.MemberAddressModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MemberAddressImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see MemberAddressImpl
 * @see com.library.slayer.model.MemberAddress
 * @see com.library.slayer.model.MemberAddressModel
 * @generated
 */
public class MemberAddressModelImpl extends BaseModelImpl<MemberAddress>
	implements MemberAddressModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a member address model instance should use the {@link com.library.slayer.model.MemberAddress} interface instead.
	 */
	public static final String TABLE_NAME = "LMS_MemberAddress";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "firstName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "streetAddress1", Types.VARCHAR },
			{ "streetAddress2", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "zip", Types.VARCHAR },
			{ "emailAddress", Types.VARCHAR },
			{ "phoneNumber", Types.VARCHAR },
			{ "mobileNumber", Types.VARCHAR },
			{ "dateAdded", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table LMS_MemberAddress (userId LONG not null primary key,firstName VARCHAR(75) null,lastName VARCHAR(75) null,streetAddress1 VARCHAR(75) null,streetAddress2 VARCHAR(75) null,city VARCHAR(75) null,zip VARCHAR(75) null,emailAddress VARCHAR(75) null,phoneNumber VARCHAR(75) null,mobileNumber VARCHAR(75) null,dateAdded DATE null)";
	public static final String TABLE_SQL_DROP = "drop table LMS_MemberAddress";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.library.slayer.model.MemberAddress"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.library.slayer.model.MemberAddress"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.library.slayer.model.MemberAddress"));

	public MemberAddressModelImpl() {
	}

	public long getPrimaryKey() {
		return _userId;
	}

	public void setPrimaryKey(long primaryKey) {
		setUserId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_userId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return MemberAddress.class;
	}

	public String getModelClassName() {
		return MemberAddress.class.getName();
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	public String getStreetAddress1() {
		if (_streetAddress1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _streetAddress1;
		}
	}

	public void setStreetAddress1(String streetAddress1) {
		_streetAddress1 = streetAddress1;
	}

	public String getStreetAddress2() {
		if (_streetAddress2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _streetAddress2;
		}
	}

	public void setStreetAddress2(String streetAddress2) {
		_streetAddress2 = streetAddress2;
	}

	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	public void setCity(String city) {
		_city = city;
	}

	public String getZip() {
		if (_zip == null) {
			return StringPool.BLANK;
		}
		else {
			return _zip;
		}
	}

	public void setZip(String zip) {
		_zip = zip;
	}

	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	public void setEmailAddress(String emailAddress) {
		_emailAddress = emailAddress;
	}

	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _phoneNumber;
		}
	}

	public void setPhoneNumber(String phoneNumber) {
		_phoneNumber = phoneNumber;
	}

	public String getMobileNumber() {
		if (_mobileNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _mobileNumber;
		}
	}

	public void setMobileNumber(String mobileNumber) {
		_mobileNumber = mobileNumber;
	}

	public Date getDateAdded() {
		return _dateAdded;
	}

	public void setDateAdded(Date dateAdded) {
		_dateAdded = dateAdded;
	}

	@Override
	public MemberAddress toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (MemberAddress)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					MemberAddress.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		MemberAddressImpl memberAddressImpl = new MemberAddressImpl();

		memberAddressImpl.setUserId(getUserId());
		memberAddressImpl.setFirstName(getFirstName());
		memberAddressImpl.setLastName(getLastName());
		memberAddressImpl.setStreetAddress1(getStreetAddress1());
		memberAddressImpl.setStreetAddress2(getStreetAddress2());
		memberAddressImpl.setCity(getCity());
		memberAddressImpl.setZip(getZip());
		memberAddressImpl.setEmailAddress(getEmailAddress());
		memberAddressImpl.setPhoneNumber(getPhoneNumber());
		memberAddressImpl.setMobileNumber(getMobileNumber());
		memberAddressImpl.setDateAdded(getDateAdded());

		memberAddressImpl.resetOriginalValues();

		return memberAddressImpl;
	}

	public int compareTo(MemberAddress memberAddress) {
		long primaryKey = memberAddress.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		MemberAddress memberAddress = null;

		try {
			memberAddress = (MemberAddress)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = memberAddress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MemberAddress> toCacheModel() {
		MemberAddressCacheModel memberAddressCacheModel = new MemberAddressCacheModel();

		memberAddressCacheModel.userId = getUserId();

		memberAddressCacheModel.firstName = getFirstName();

		String firstName = memberAddressCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			memberAddressCacheModel.firstName = null;
		}

		memberAddressCacheModel.lastName = getLastName();

		String lastName = memberAddressCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			memberAddressCacheModel.lastName = null;
		}

		memberAddressCacheModel.streetAddress1 = getStreetAddress1();

		String streetAddress1 = memberAddressCacheModel.streetAddress1;

		if ((streetAddress1 != null) && (streetAddress1.length() == 0)) {
			memberAddressCacheModel.streetAddress1 = null;
		}

		memberAddressCacheModel.streetAddress2 = getStreetAddress2();

		String streetAddress2 = memberAddressCacheModel.streetAddress2;

		if ((streetAddress2 != null) && (streetAddress2.length() == 0)) {
			memberAddressCacheModel.streetAddress2 = null;
		}

		memberAddressCacheModel.city = getCity();

		String city = memberAddressCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			memberAddressCacheModel.city = null;
		}

		memberAddressCacheModel.zip = getZip();

		String zip = memberAddressCacheModel.zip;

		if ((zip != null) && (zip.length() == 0)) {
			memberAddressCacheModel.zip = null;
		}

		memberAddressCacheModel.emailAddress = getEmailAddress();

		String emailAddress = memberAddressCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			memberAddressCacheModel.emailAddress = null;
		}

		memberAddressCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = memberAddressCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			memberAddressCacheModel.phoneNumber = null;
		}

		memberAddressCacheModel.mobileNumber = getMobileNumber();

		String mobileNumber = memberAddressCacheModel.mobileNumber;

		if ((mobileNumber != null) && (mobileNumber.length() == 0)) {
			memberAddressCacheModel.mobileNumber = null;
		}

		Date dateAdded = getDateAdded();

		if (dateAdded != null) {
			memberAddressCacheModel.dateAdded = dateAdded.getTime();
		}
		else {
			memberAddressCacheModel.dateAdded = Long.MIN_VALUE;
		}

		return memberAddressCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", streetAddress1=");
		sb.append(getStreetAddress1());
		sb.append(", streetAddress2=");
		sb.append(getStreetAddress2());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", zip=");
		sb.append(getZip());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", phoneNumber=");
		sb.append(getPhoneNumber());
		sb.append(", mobileNumber=");
		sb.append(getMobileNumber());
		sb.append(", dateAdded=");
		sb.append(getDateAdded());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.library.slayer.model.MemberAddress");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>streetAddress1</column-name><column-value><![CDATA[");
		sb.append(getStreetAddress1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>streetAddress2</column-name><column-value><![CDATA[");
		sb.append(getStreetAddress2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zip</column-name><column-value><![CDATA[");
		sb.append(getZip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phoneNumber</column-name><column-value><![CDATA[");
		sb.append(getPhoneNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobileNumber</column-name><column-value><![CDATA[");
		sb.append(getMobileNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateAdded</column-name><column-value><![CDATA[");
		sb.append(getDateAdded());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MemberAddress.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			MemberAddress.class
		};
	private long _userId;
	private String _userUuid;
	private String _firstName;
	private String _lastName;
	private String _streetAddress1;
	private String _streetAddress2;
	private String _city;
	private String _zip;
	private String _emailAddress;
	private String _phoneNumber;
	private String _mobileNumber;
	private Date _dateAdded;
	private transient ExpandoBridge _expandoBridge;
	private MemberAddress _escapedModelProxy;
}