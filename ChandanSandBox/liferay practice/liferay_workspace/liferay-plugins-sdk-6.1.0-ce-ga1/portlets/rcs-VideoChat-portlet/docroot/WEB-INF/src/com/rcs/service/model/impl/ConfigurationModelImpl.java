/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rcs.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import com.rcs.service.model.Configuration;
import com.rcs.service.model.ConfigurationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the Configuration service. Represents a row in the &quot;VideoChat_Configuration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rcs.service.model.ConfigurationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConfigurationImpl}.
 * </p>
 *
 * @author flor
 * @see ConfigurationImpl
 * @see com.rcs.service.model.Configuration
 * @see com.rcs.service.model.ConfigurationModel
 * @generated
 */
public class ConfigurationModelImpl extends BaseModelImpl<Configuration>
	implements ConfigurationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a configuration model instance should use the {@link com.rcs.service.model.Configuration} interface instead.
	 */
	public static final String TABLE_NAME = "VideoChat_Configuration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "apiKey", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "apiSecret", Types.VARCHAR },
			{ "type_", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table VideoChat_Configuration (apiKey VARCHAR(75) not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,apiSecret VARCHAR(255) null,type_ INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table VideoChat_Configuration";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rcs.service.model.Configuration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rcs.service.model.Configuration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rcs.service.model.Configuration"));

	public ConfigurationModelImpl() {
	}

	public String getPrimaryKey() {
		return _apiKey;
	}

	public void setPrimaryKey(String primaryKey) {
		setApiKey(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return _apiKey;
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return Configuration.class;
	}

	public String getModelClassName() {
		return Configuration.class.getName();
	}

	public String getApiKey() {
		if (_apiKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _apiKey;
		}
	}

	public void setApiKey(String apiKey) {
		_apiKey = apiKey;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public String getApiSecret() {
		if (_apiSecret == null) {
			return StringPool.BLANK;
		}
		else {
			return _apiSecret;
		}
	}

	public void setApiSecret(String apiSecret) {
		_apiSecret = apiSecret;
	}

	public int getType() {
		return _type;
	}

	public void setType(int type) {
		_type = type;
	}

	@Override
	public Configuration toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Configuration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ConfigurationImpl configurationImpl = new ConfigurationImpl();

		configurationImpl.setApiKey(getApiKey());
		configurationImpl.setGroupId(getGroupId());
		configurationImpl.setCompanyId(getCompanyId());
		configurationImpl.setUserId(getUserId());
		configurationImpl.setUserName(getUserName());
		configurationImpl.setCreateDate(getCreateDate());
		configurationImpl.setModifiedDate(getModifiedDate());
		configurationImpl.setApiSecret(getApiSecret());
		configurationImpl.setType(getType());

		configurationImpl.resetOriginalValues();

		return configurationImpl;
	}

	public int compareTo(Configuration configuration) {
		String primaryKey = configuration.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Configuration configuration = null;

		try {
			configuration = (Configuration)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		String primaryKey = configuration.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Configuration> toCacheModel() {
		ConfigurationCacheModel configurationCacheModel = new ConfigurationCacheModel();

		configurationCacheModel.apiKey = getApiKey();

		String apiKey = configurationCacheModel.apiKey;

		if ((apiKey != null) && (apiKey.length() == 0)) {
			configurationCacheModel.apiKey = null;
		}

		configurationCacheModel.groupId = getGroupId();

		configurationCacheModel.companyId = getCompanyId();

		configurationCacheModel.userId = getUserId();

		configurationCacheModel.userName = getUserName();

		String userName = configurationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			configurationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			configurationCacheModel.createDate = createDate.getTime();
		}
		else {
			configurationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			configurationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			configurationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		configurationCacheModel.apiSecret = getApiSecret();

		String apiSecret = configurationCacheModel.apiSecret;

		if ((apiSecret != null) && (apiSecret.length() == 0)) {
			configurationCacheModel.apiSecret = null;
		}

		configurationCacheModel.type = getType();

		return configurationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{apiKey=");
		sb.append(getApiKey());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", apiSecret=");
		sb.append(getApiSecret());
		sb.append(", type=");
		sb.append(getType());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.rcs.service.model.Configuration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>apiKey</column-name><column-value><![CDATA[");
		sb.append(getApiKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>apiSecret</column-name><column-value><![CDATA[");
		sb.append(getApiSecret());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Configuration.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Configuration.class
		};
	private String _apiKey;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _apiSecret;
	private int _type;
	private Configuration _escapedModelProxy;
}