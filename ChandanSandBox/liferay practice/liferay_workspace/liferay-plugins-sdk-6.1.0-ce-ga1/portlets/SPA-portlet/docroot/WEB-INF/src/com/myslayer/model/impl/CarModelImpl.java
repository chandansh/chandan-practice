/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.myslayer.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.myslayer.model.Car;
import com.myslayer.model.CarModel;
import com.myslayer.model.CarSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the Car service. Represents a row in the &quot;myslayer_Car&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.myslayer.model.CarModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CarImpl}.
 * </p>
 *
 * @author Chandan
 * @see CarImpl
 * @see com.myslayer.model.Car
 * @see com.myslayer.model.CarModel
 * @generated
 */
@JSON(strict = true)
public class CarModelImpl extends BaseModelImpl<Car> implements CarModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a car model instance should use the {@link com.myslayer.model.Car} interface instead.
	 */
	public static final String TABLE_NAME = "myslayer_Car";
	public static final Object[][] TABLE_COLUMNS = {
			{ "carId", Types.BIGINT },
			{ "brand", Types.VARCHAR },
			{ "color", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table myslayer_Car (carId LONG not null primary key,brand VARCHAR(75) null,color VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table myslayer_Car";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.myslayer.model.Car"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.myslayer.model.Car"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Car toModel(CarSoap soapModel) {
		Car model = new CarImpl();

		model.setCarId(soapModel.getCarId());
		model.setBrand(soapModel.getBrand());
		model.setColor(soapModel.getColor());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Car> toModels(CarSoap[] soapModels) {
		List<Car> models = new ArrayList<Car>(soapModels.length);

		for (CarSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.myslayer.model.Car"));

	public CarModelImpl() {
	}

	public long getPrimaryKey() {
		return _carId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCarId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_carId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Car.class;
	}

	public String getModelClassName() {
		return Car.class.getName();
	}

	@JSON
	public long getCarId() {
		return _carId;
	}

	public void setCarId(long carId) {
		_carId = carId;
	}

	@JSON
	public String getBrand() {
		if (_brand == null) {
			return StringPool.BLANK;
		}
		else {
			return _brand;
		}
	}

	public void setBrand(String brand) {
		_brand = brand;
	}

	@JSON
	public String getColor() {
		if (_color == null) {
			return StringPool.BLANK;
		}
		else {
			return _color;
		}
	}

	public void setColor(String color) {
		_color = color;
	}

	@Override
	public Car toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Car)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Car.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		CarImpl carImpl = new CarImpl();

		carImpl.setCarId(getCarId());
		carImpl.setBrand(getBrand());
		carImpl.setColor(getColor());

		carImpl.resetOriginalValues();

		return carImpl;
	}

	public int compareTo(Car car) {
		long primaryKey = car.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Car car = null;

		try {
			car = (Car)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = car.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Car> toCacheModel() {
		CarCacheModel carCacheModel = new CarCacheModel();

		carCacheModel.carId = getCarId();

		carCacheModel.brand = getBrand();

		String brand = carCacheModel.brand;

		if ((brand != null) && (brand.length() == 0)) {
			carCacheModel.brand = null;
		}

		carCacheModel.color = getColor();

		String color = carCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			carCacheModel.color = null;
		}

		return carCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{carId=");
		sb.append(getCarId());
		sb.append(", brand=");
		sb.append(getBrand());
		sb.append(", color=");
		sb.append(getColor());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.myslayer.model.Car");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>carId</column-name><column-value><![CDATA[");
		sb.append(getCarId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brand</column-name><column-value><![CDATA[");
		sb.append(getBrand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>color</column-name><column-value><![CDATA[");
		sb.append(getColor());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Car.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Car.class
		};
	private long _carId;
	private String _brand;
	private String _color;
	private transient ExpandoBridge _expandoBridge;
	private Car _escapedModelProxy;
}