/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.slayer.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.slayer.model.ShoppingCartExt;
import com.slayer.model.ShoppingCartExtModel;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the ShoppingCartExt service. Represents a row in the &quot;hr_ShoppingCartExt&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.slayer.model.ShoppingCartExtModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShoppingCartExtImpl}.
 * </p>
 *
 * @author ahmedhasan
 * @see ShoppingCartExtImpl
 * @see com.slayer.model.ShoppingCartExt
 * @see com.slayer.model.ShoppingCartExtModel
 * @generated
 */
public class ShoppingCartExtModelImpl extends BaseModelImpl<ShoppingCartExt>
	implements ShoppingCartExtModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a shopping cart ext model instance should use the {@link com.slayer.model.ShoppingCartExt} interface instead.
	 */
	public static final String TABLE_NAME = "hr_ShoppingCartExt";
	public static final Object[][] TABLE_COLUMNS = {
			{ "recId", Types.BIGINT },
			{ "cartId", Types.BIGINT },
			{ "itemId", Types.BIGINT },
			{ "amount", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table hr_ShoppingCartExt (recId LONG not null primary key,cartId LONG,itemId LONG,amount INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table hr_ShoppingCartExt";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.slayer.model.ShoppingCartExt"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.slayer.model.ShoppingCartExt"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.slayer.model.ShoppingCartExt"));

	public ShoppingCartExtModelImpl() {
	}

	public long getPrimaryKey() {
		return _recId;
	}

	public void setPrimaryKey(long primaryKey) {
		setRecId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_recId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ShoppingCartExt.class;
	}

	public String getModelClassName() {
		return ShoppingCartExt.class.getName();
	}

	public long getRecId() {
		return _recId;
	}

	public void setRecId(long recId) {
		_recId = recId;
	}

	public long getCartId() {
		return _cartId;
	}

	public void setCartId(long cartId) {
		_cartId = cartId;
	}

	public long getItemId() {
		return _itemId;
	}

	public void setItemId(long itemId) {
		_itemId = itemId;
	}

	public Integer getAmount() {
		return _amount;
	}

	public void setAmount(Integer amount) {
		_amount = amount;
	}

	@Override
	public ShoppingCartExt toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ShoppingCartExt)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					ShoppingCartExt.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		ShoppingCartExtImpl shoppingCartExtImpl = new ShoppingCartExtImpl();

		shoppingCartExtImpl.setRecId(getRecId());
		shoppingCartExtImpl.setCartId(getCartId());
		shoppingCartExtImpl.setItemId(getItemId());
		shoppingCartExtImpl.setAmount(getAmount());

		shoppingCartExtImpl.resetOriginalValues();

		return shoppingCartExtImpl;
	}

	public int compareTo(ShoppingCartExt shoppingCartExt) {
		long primaryKey = shoppingCartExt.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ShoppingCartExt shoppingCartExt = null;

		try {
			shoppingCartExt = (ShoppingCartExt)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = shoppingCartExt.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ShoppingCartExt> toCacheModel() {
		ShoppingCartExtCacheModel shoppingCartExtCacheModel = new ShoppingCartExtCacheModel();

		shoppingCartExtCacheModel.recId = getRecId();

		shoppingCartExtCacheModel.cartId = getCartId();

		shoppingCartExtCacheModel.itemId = getItemId();

		shoppingCartExtCacheModel.amount = getAmount();

		return shoppingCartExtCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{recId=");
		sb.append(getRecId());
		sb.append(", cartId=");
		sb.append(getCartId());
		sb.append(", itemId=");
		sb.append(getItemId());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.slayer.model.ShoppingCartExt");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>recId</column-name><column-value><![CDATA[");
		sb.append(getRecId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cartId</column-name><column-value><![CDATA[");
		sb.append(getCartId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ShoppingCartExt.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ShoppingCartExt.class
		};
	private long _recId;
	private long _cartId;
	private long _itemId;
	private Integer _amount;
	private transient ExpandoBridge _expandoBridge;
	private ShoppingCartExt _escapedModelProxy;
}